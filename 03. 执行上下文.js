// 执行上下文
/*
* js引擎在js代码正式执行之前先创建并进入执行环境
*   1. 创建变量对象，该对应用于收集: 变量，function，函数的参数
*     - var function
*   2. 确认this的指向
*   3. 创建作用域链
*
* */


/*
  内存管理：
    js引擎不允许直接操作堆空间，所以我们每次访问堆空间的数据，先找栈空间，通过栈空间变量保存的引用地址去访问堆空间
  内存管理三部曲：
    1. 分配内存空间
    2. 使用分配的内存空间
    3. 使用完释放分配的内存空间
* 函数的执行上下文：
*   函数的局部变量都保存在栈空间
*   如果某一个变量对应的值是引用数据类型： 变量保存的是引用地址，数据保存堆内存
*   函数保证高效的方法： 函数执行完立马去释放之前分配给当前函数的栈空间
*
* */

// console.log(this);
// console.log(window);
var a = 123;




function fun() {
  console.log('fun()');
  var b = 123;
  function fun2() {
    console.log('fun2()');
  }
  fun2();
}
fun();


/*
* 执行上下文
*   1. 执行上下文环境
*     - 创建执行上下文对象
*     - 进入执行上下文环境
*
*
*   2. 执行上下文对象
*
*
*   3. 执行上下文栈
*`
*
*
*
* */



